{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","addItem","bind","handleInput","preventDefault","newItem","this","setState","Date","now","filteredItems","filter","console","log","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAkCeA,MA7Bf,SAAmBC,GACf,IACMD,EADQC,EAAMC,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BACAC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GACPX,EAAMY,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAExC,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC1Cd,EAAMe,WAAWZ,EAAKE,MAE1BW,KAAK,gBAKrB,OAAO,6BACH,kBAAC,IAAD,CAAUC,SAAW,IAAKC,OAAQ,eAC7BnB,K,eCvBjBoB,IAAQC,IAAIC,K,IAqFGC,E,kDAjFb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDuB,MAAQ,CACXtB,MAAM,GACNuB,YAAa,CACXf,KAAK,IACLJ,IAAI,MAGV,EAAKoB,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZE,E,oDAcTf,GACNA,EAAEiB,iBACF,IAAMC,EAAUC,KAAKP,MAAMC,YAC3B,GAAkB,MAAfK,EAAQpB,KACX,CACE,IAAMR,EAAK,sBAAO6B,KAAKP,MAAMtB,OAAlB,CAAyB4B,IACtCC,KAAKC,SAAU,CACb9B,MAAQA,EACRuB,YAAY,CACVf,KAAM,IACNJ,IAAI,U,kCAKEM,GACVmB,KAAKC,SAAS,CACZP,YAAY,CACVf,KAAKE,EAAEE,OAAOL,MACdH,IAAI2B,KAAKC,W,iCAIJ5B,GACT,IAAM6B,EAAgBJ,KAAKP,MAAMtB,MAAMkC,QAAO,SAAAlC,GAAK,OAAIA,EAAMI,MAAMA,KACnEyB,KAAKC,SAAS,CACZ9B,MAAMiC,M,gCAGAzB,EAAMJ,GACd+B,QAAQC,IAAI,SAAUP,KAAKP,MAAMtB,OACjC,IAAMA,EAAQ6B,KAAKP,MAAMtB,MACzBA,EAAMC,KAAI,SAAAD,GACLA,EAAMI,MAAQA,IACf+B,QAAQC,IAAIpC,EAAMI,IAAK,IAAIA,GACzBJ,EAAMQ,KAAKA,MAGjBqB,KAAKC,SAAS,CACZ9B,MAAMA,M,+BAKR,OACE,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa+B,SAAUR,KAAKL,SACnC,2BAAOnB,KAAK,OACViC,YAAa,aACb/B,MAAOsB,KAAKP,MAAMC,YAAYf,KAC7BC,SAAWoB,KAAKH,cAEnB,4BAAQrB,KAAK,UAAb,QAEF,2BAAIwB,KAAKP,MAAMtB,MAAMQ,MAErB,kBAAC,EAAD,CAAWR,MAAO6B,KAAKP,MAAMtB,MAClBc,WAAae,KAAKf,WAClBH,UAAYkB,KAAKlB,kB,GA1EtB4B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.c3ff180d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const ListItems = items.map(item=>\r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input \r\n                    type=\"text\" \r\n                    id={item.key} \r\n                    value={item.text} \r\n                    onChange={(e)=>{\r\n                        props.setUpdate(e.target.value,item.key)\r\n                    }}/>\r\n                    <span>\r\n                        <FontAwesomeIcon className=\"faicons\" onClick={()=>{\r\n                            props.deleteItem(item.key)\r\n                        }}\r\n                        icon=\"trash\"/>    \r\n                    </span>\r\n                </p>\r\n            </div>\r\n        })\r\n        return <div>\r\n            <FlipMove duration ={300} easing =\"ease-in-out\">\r\n                {ListItems}\r\n                </FlipMove>\r\n        </div>;\r\n} \r\n\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items:[],\n      currentItem: {\n        text:' ',\n        key:' '\n      }\n    }\n  this.addItem = this.addItem.bind(this);  \n  this.handleInput = this.handleInput.bind(this);  \n  this.deleteItem = this.deleteItem.bind(this);  \n  this.setUpdate = this.setUpdate.bind(this);  \n  }\n    addItem(e){\n      e.preventDefault();\n      const newItem = this.state.currentItem;\n      if(newItem.text!==\" \")\n      {\n        const items = [...this.state.items, newItem];\n      this.setState ({\n        items : items,\n        currentItem:{\n          text: ' ',\n          key:' '\n        }\n      })  \n      }\n    }\n    handleInput(e){\n      this.setState({\n        currentItem:{\n          text:e.target.value,\n          key:Date.now()\n        }\n      })\n    }\n    deleteItem(key){\n      const filteredItems = this.state.items.filter(items => items.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n    }\n    setUpdate(text, key){\n      console.log(\"items:\"+ this.state.items);\n      const items = this.state.items;\n      items.map(items=> {\n        if(items.key === key ){\n          console.log(items.key+ \" \"+key)\n            items.text=text;\n          }\n      })\n      this.setState({\n        items:items\n      })\n    }\n\n    render(){\n      return(\n        <div className=\"App\">\n          <header>\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\n              <input type=\"text\" \n                placeholder= \"Enter task\" \n                value={this.state.currentItem.text}\n                 onChange ={this.handleInput}> \n              </input>\n              <button type=\"submit\">Add</button>\n            </form>\n            <p>{this.state.items.text}</p>\n\n            <ListItems items={this.state.items}\n                       deleteItem= {this.deleteItem}\n                       setUpdate= {this.setUpdate}/>\n          </header>\n        </div>\n      )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}